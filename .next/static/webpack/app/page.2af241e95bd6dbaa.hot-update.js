"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./hooks/useBanlist.ts":
/*!*****************************!*\
  !*** ./hooks/useBanlist.ts ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBanlist: function() { return /* binding */ useBanlist; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ useBanlist auto */ \nfunction useBanlist() {\n    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    const { pollingInterval = 30000, autoRefresh = true, showToast } = options;\n    const [bannedUsers, setBannedUsers] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const intervalRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const abortControllerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const fetchBanlist = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async function() {\n        let showLoadingState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;\n        // Cancel previous request silently\n        if (abortControllerRef.current) {\n        // Just replace the controller, don't abort the old one\n        }\n        abortControllerRef.current = new AbortController();\n        if (showLoadingState) {\n            setLoading(true);\n        }\n        setError(null);\n        try {\n            const response = await fetch(\"/api/blocklist\", {\n                signal: abortControllerRef.current.signal,\n                credentials: \"include\"\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP \".concat(response.status));\n            }\n            const contentType = response.headers.get(\"content-type\");\n            if (!contentType || !contentType.includes(\"application/json\")) {\n                setBannedUsers([]);\n                return;\n            }\n            const responseText = await response.text();\n            // Check if response starts with HTML\n            if (responseText.trim().startsWith(\"<!DOCTYPE\") || responseText.trim().startsWith(\"<html\")) {\n                setBannedUsers([]);\n                return;\n            }\n            const data = JSON.parse(responseText);\n            if (data.error) {\n                throw new Error(data.error);\n            }\n            // Handle different response formats\n            let userList = [];\n            if (Array.isArray(data)) {\n                userList = data.map((user)=>({\n                        number: typeof user === \"string\" ? user : user.number,\n                        blockedAt: user.blockedAt || user.timestamp\n                    }));\n            } else if (data.data && Array.isArray(data.data)) {\n                userList = data.data.map((user)=>({\n                        number: typeof user === \"string\" ? user : user.number,\n                        blockedAt: user.blockedAt || user.timestamp\n                    }));\n            } else if (typeof data === \"object\" && data !== null) {\n                // Convert object to array (for cases where banlist is returned as an object)\n                userList = Object.keys(data).map((number)=>({\n                        number,\n                        blockedAt: data[number].blockedAt || data[number].timestamp || new Date().toISOString()\n                    }));\n            }\n            setBannedUsers(userList);\n            setError(null);\n        } catch (err) {\n            if (err && err.name !== \"AbortError\") {\n                // If it's a JSON parse error, show empty state instead of error\n                if (err.message.includes(\"Unexpected token\") || err.message.includes(\"JSON\")) {\n                    setBannedUsers([]);\n                } else {\n                    const errorMessage = \"Failed to fetch banlist\";\n                    setError(errorMessage);\n                    if (showLoadingState) {\n                        showToast === null || showToast === void 0 ? void 0 : showToast(\"Failed to Load Banlist\", errorMessage, \"error\");\n                    }\n                }\n            }\n        } finally{\n            setLoading(false);\n        }\n    }, [\n        showToast\n    ]);\n    const refreshBanlist = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        fetchBanlist(true);\n    }, [\n        fetchBanlist\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fetchBanlist(true);\n        if (autoRefresh && pollingInterval > 0) {\n            intervalRef.current = setInterval(()=>{\n                fetchBanlist(false); // Silent refresh\n            }, pollingInterval);\n        }\n        return ()=>{\n            if (intervalRef.current) {\n                clearInterval(intervalRef.current);\n                intervalRef.current = undefined;\n            }\n            // Just clear the ref, don't call abort during cleanup to avoid React errors\n            abortControllerRef.current = undefined;\n        };\n    }, [\n        fetchBanlist,\n        autoRefresh,\n        pollingInterval\n    ]);\n    return {\n        bannedUsers,\n        loading,\n        error,\n        refreshBanlist,\n        bannedCount: bannedUsers.length\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/useBanlist.ts\n"));

/***/ })

});